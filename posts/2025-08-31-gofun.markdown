---
title: Go functional (as it can) utils
tags: crazy, golang
---

Практикуясь в го в какой-то момент очень захотелось вот такого. 
 

```go
func Fmap[A any, B any, AB func(A) B](a []A, f AB) []B {
	b := make([]B, 0, len(a))
	for _, e := range a {
		b = append(b, f(e))
	}

	return b
}

func FmapInto[A any, B any, AB func(A) B](a []A, f AB, b []B) []B {
	for i, e := range a {
		b[i] = f(e)
	}

	return b
}

func ForAll[A any, F func(A)](a []A, f F) {
	for _, e := range a {
		f(e)
	}
}
```
Это реализует распространенные операции функционального программирования, такие как `map` и `forEach`, с использованием дженериков в Go, что позволяет выполнять типобезопасные преобразования и итерации над слайсами. Вариант `FmapInto` особенно полезен для предварительно выделенных слайсов, чтобы избежать дополнительных аллокаций памяти

---

```go
While practicing Go, at some point I really wanted something like this:
go

func Fmap[A any, B any, AB func(A) B](a []A, f AB) []B {
	b := make([]B, 0, len(a))
	for _, e := range a {
		b = append(b, f(e))
	}

	return b
}

func FmapInto[A any, B any, AB func(A) B](a []A, f AB, b []B) []B {
	for i, e := range a {
		b[i] = f(e)
	}

	return b
}

func ForAll[A any, F func(A)](a []A, f F) {
	for _, e := range a {
		f(e)
	}
}
```

This implements common functional programming operations like `map` and `forEach` using Go's generics, allowing for type-safe transformations and iterations over slices. The `FmapInto` variant is particularly useful for pre-allocated slices to avoid extra allocations.
